[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# The Patient, part 1/2
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''
for i=1, #cards_destroyed do
    G.E_MANAGER:add_event(Event({
        func = function()
            if cards_destroyed[i].shattered then
                cards_destroyed[i]:shatter()
            else
                cards_destroyed[i]:start_dissolve()
            end
            return true
        end
        }))
end
'''
position = 'after'
payload = '''
if G.GAME.blind and G.GAME.blind.name == 'The Patient' and not G.GAME.blind.disabled and G.GAME.current_round.hands_left > 0 then --and hand_chips*mult + G.GAME.chips >= G.GAME.blind.chips then
    SMODS.patient_gain_score(G.GAME.blind)
end
'''

# The Patient, part 2/2
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = "G.FUNCS.evaluate_round = function()"
position = 'after'
payload = '''
if G.GAME.patient_scoring then G.GAME.patient_scoring = nil end
'''

# Spawn chess blinds, part 1/6
[[patches]]
[patches.pattern]
target = 'game.lua'
match_indent = true
pattern = "self.GAME.round_resets.blind_choices.Boss = get_new_boss()"
position = 'before'
payload = '''
if self.GAME.showdown_chess then self.GAME.round_resets.blind_choices.Big = Showdown.get_new_chess_blind() end
'''

# Spawn chess blinds, part 2/6
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
pattern = "G.GAME.round_resets.blind_choices.Boss = get_new_boss()"
position = 'before'
payload = '''
if G.GAME.showdown_chess then G.GAME.round_resets.blind_choices.Big = Showdown.get_new_chess_blind() end
'''

# Spawn chess blinds, part 3/6
[[patches]]
[patches.pattern]
target = 'game.lua'
match_indent = true
pattern = "if v.boss then bosses_used[k] = 0 end"
position = 'after'
payload = '''
if v.chess_boss then bosses_used[k] = 0 end
'''

# Spawn chess blinds, part 4/6
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
pattern = '''self.triggered = nil'''
position = 'after'
payload = '''
self.chess_blind = self.config.blind.chess_boss and true or false
'''

# Spawn chess blinds, part 5/6
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
pattern = '''elseif self.name == "Big Blind" then'''
position = 'at'
payload = '''
elseif self.name == "Big Blind" or self.chess_blind then
'''

# Spawn chess blinds, part 6/6
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then'''
position = 'at'
payload = '''
elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big or G.GAME.round_resets.blind.chess_boss then
'''

# Chess blinds color
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
pattern = "if v.boss.showdown then"
position = 'at'
payload = '''
if not v.chess_boss and v.boss.showdown then
'''