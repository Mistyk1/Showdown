[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Alternative stake stickers, part 1/16
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''if self.sticker or ((self.sticker_run and self.sticker_run~='NONE') and G.SETTINGS.run_stake_stickers)  then loc_vars = loc_vars or {}; loc_vars.sticker=(self.sticker or self.sticker_run) end'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] and self.sticker_run_alt and self.sticker_run_alt ~= 'NONE' and G.SETTINGS.run_stake_stickers then loc_vars = loc_vars or {}; loc_vars.sticker_run_alt = self.sticker_run_alt end
'''

# Alternative stake stickers, part 2/16
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if specific_vars and specific_vars.sticker then info_queue[#info_queue+1] = {key = string.lower(specific_vars.sticker)..'_sticker', set = 'Other'} end'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] and specific_vars and specific_vars.sticker_run_alt then info_queue[#info_queue+1] = {key = string.lower(specific_vars.sticker_run_alt)..'_sticker', set = 'Other'} end
'''

# Alternative stake stickers, part 3/16
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if not ((specific_vars and not specific_vars.sticker) and (card_type == 'Default' or card_type == 'Enhanced')) then'''
position = "at"
match_indent = true
payload = '''
if not ((specific_vars and not (specific_vars.sticker or specific_vars.sticker_run_alt)) and (card_type == 'Default' or card_type == 'Enhanced')) then
'''

# Alternative stake stickers, part 4/16
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''if self.ability.consumeable and self.ability.consumeable.max_highlighted then'''
position = "before"
match_indent = true
payload = '''
if Showdown.config["Stakes"] and self.ability.set == 'Joker' and not self.sticker_run_alt then
    self.sticker_run_alt = Showdown.get_joker_win_sticker_alt(self.config.center) or 'NONE'
end
'''

# Alternative stake stickers, part 5/16
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''card.sticker = get_joker_win_sticker(center)'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_joker_win_sticker_alt(center) end
'''

# Alternative stake stickers, part 6/16
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''card.sticker = get_joker_win_sticker(center)'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_joker_win_sticker_alt(center) end
'''

# Alternative stake stickers, part 7/16
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''if G.sticker_card then G.sticker_card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center) end'''
position = "at"
match_indent = true
payload = '''
if G.sticker_card then
    G.sticker_card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center)
    if Showdown.config["Stakes"] then G.sticker_card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(G.GAME.viewed_back.effect.center) end
end
'''

# Alternative stake stickers, part 8/16
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''if i == 52 then G.sticker_card = card; card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center) end'''
position = "at"
match_indent = true
payload = '''
if i == 52 then
    G.sticker_card = card
    card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center)
    if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(G.GAME.viewed_back.effect.center) end
end
'''

# Alternative stake stickers, part 9/16
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''if i == 10 then G.sticker_card = card; card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center) end'''
position = "at"
match_indent = true
payload = '''
if i == 10 then
    G.sticker_card = card
    card.sticker = get_deck_win_sticker(G.GAME.viewed_back.effect.center)
    if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(G.GAME.viewed_back.effect.center) end
end
'''

# Alternative stake stickers, part 10/16
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/ui.lua"]'''
pattern = '''modify_card = function(card, center) card.sticker = get_joker_win_sticker(center) end,'''
position = "at"
match_indent = true
payload = '''
modify_card = function(card, center)
    card.sticker = get_joker_win_sticker(center)
    if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_joker_win_sticker_alt(center) end
end,
'''

# Alternative stake stickers, part 11/16
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''if (v.stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) then'''
position = "at"
match_indent = true
payload = '''
if (v.stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) and not v.alternate then
'''

# Alternative stake stickers, part 12/16
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''
for key, _ in pairs(G.PROFILES[G.SETTINGS.profile].deck_usage[_center.key].wins_by_key) do
    if (G.P_STAKES[key] and G.P_STAKES[key].stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) then
        _stake = key
    end
end
'''
position = "at"
match_indent = true
payload = '''
for key, _ in pairs(G.PROFILES[G.SETTINGS.profile].deck_usage[_center.key].wins_by_key) do
    if (G.P_STAKES[key] and G.P_STAKES[key].stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) and not G.P_STAKES[key].alternate then
        _stake = key
    end
end
'''

# Alternative stake stickers, part 13/16
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or ((self.sticker_run and self.sticker_run ~= 'NONE') and G.SETTINGS.run_stake_stickers) or (self.ability.set == 'Spectral') or self.debuff or self.greyed or (self.ability.name == 'The Soul') or (self.ability.set == 'Voucher') or (self.ability.set == 'Booster') or self.config.center.soul_pos or self.config.center.demo then'''
position = "at"
match_indent = true
payload = '''
if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or (((self.sticker_run and self.sticker_run ~= 'NONE') or (self.sticker_run_alt and self.sticker_run_alt ~= 'NONE')) and G.SETTINGS.run_stake_stickers) or (self.ability.set == 'Spectral') or self.debuff or self.greyed or (self.ability.name == 'The Soul') or (self.ability.set == 'Voucher') or (self.ability.set == 'Booster') or self.config.center.soul_pos or self.config.center.demo then
'''

# Alternative stake stickers, part 14/16
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''for k, v in pairs(SMODS.Stickers) do'''
position = "before"
match_indent = true
payload = '''
if Showdown.config["Stakes"] and self.sticker_run_alt and G.shared_stickers[self.sticker_run_alt] and G.SETTINGS.run_stake_stickers then
    G.shared_stickers[self.sticker_run_alt].role.draw_major = self
    G.shared_stickers[self.sticker_run_alt]:draw_shader('dissolve', nil, nil, nil, self.children.center)
    G.shared_stickers[self.sticker_run_alt]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center)
end
'''

# Alternative stake stickers, part 15/16
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''
if stake.shiny then G.shared_stickers[self.sticker]:draw_shader('voucher', nil, self.ARGS.send_to_shader, true, self.children.center, nil, self.sticker_rotation, sticker_offset.x, sticker_offset.y) end
        end
'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] and self.sticker_run_alt and G.shared_stickers[self.sticker_run_alt] then
    G.shared_stickers[self.sticker_run_alt].role.draw_major = self
    local sticker_run_alt_offset = self.sticker_run_alt_offset or {}
    G.shared_stickers[self.sticker_run_alt]:draw_shader('dissolve', nil, nil, true, self.children.center, nil, self.sticker_rotation, sticker_run_alt_offset.x, sticker_run_alt_offset.y)
    if self.sticker_run_alt == 'showdown_diamond' then G.shared_stickers[self.sticker_run_alt]:draw_shader('voucher', nil, self.ARGS.send_to_shader, true, self.children.center) end
end
'''

# Alternative stake stickers, part 16/16 (need to be finished)
[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = '''G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins_by_key[SMODS.stake_from_index(G.GAME.stake)] = (G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins_by_key[SMODS.stake_from_index(G.GAME.stake)] or 0) + 1'''
position = "after"
match_indent = true
payload = '''
if G.P_CENTER_POOLS.Stake[G.GAME.stake].alternate then
    --
end
'''

# Onyx Stake
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if G.GAME.modifiers.enable_rentals_in_shop and pseudorandom((area == G.pack_cards and 'packssjr' or 'ssjr')..G.GAME.round_resets.ante) > 0.7 and not SMODS.Stickers["rental"].should_apply then'''
position = "before"
match_indent = true
payload = '''
if G.GAME.modifiers.enable_statics_in_shop and pseudorandom((area == G.pack_cards and 'packssjs' or 'ssjs')..G.GAME.round_resets.ante) > 0.7 and not SMODS.Stickers["showdown_static"].should_apply then
    SMODS.Stickers["showdown_static"]:apply(card)
end
'''

# Avoid unlocking all stake decks when winning in an alternate stake
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if get_deck_win_stake() >= card.unlock_condition.stake then'''
position = "at"
match_indent = true
payload = '''
if
    get_deck_win_stake() >= card.unlock_condition.stake
    and G.P_CENTER_POOLS.Stake[card.unlock_condition.stake].alternate == G.P_CENTER_POOLS.Stake[G.GAME.stake].alternate
then
'''

## Card Sleeves

# Alt stake stickers on sleeves, part 1/2
[[patches]]
[patches.pattern]
target = '''=[SMODS CardSleeves "CardSleeves.lua"]'''
pattern = '''if (G.P_STAKES[key] and G.P_STAKES[key].stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) then'''
position = "at"
match_indent = true
payload = '''
if (G.P_STAKES[key] and G.P_STAKES[key].stake_level or 0) > (_stake and G.P_STAKES[_stake].stake_level or 0) and not G.P_STAKES[key].alternate then
'''

# Alt stake stickers on sleeves, part 1/2
[[patches]]
[patches.pattern]
target = '''=[SMODS CardSleeves "CardSleeves.lua"]'''
pattern = '''card.sticker = get_sleeve_win_sticker(sleeve_center.key)'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_sleeve_win_sticker_alt(sleeve_center.key) end
'''

## Galdur

# Alt stake stickers on Galdur deck screen, part 1/2
[[patches]]
[patches.pattern]
target = '''=[SMODS galdur "galdur.lua"]'''
pattern = '''card.sticker = get_deck_win_sticker(G.P_CENTER_POOLS.Back[count])'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(G.P_CENTER_POOLS.Back[count]) end
'''

# Alt stake stickers on Galdur deck screen, part 2/2
[[patches]]
[patches.pattern]
target = '''=[SMODS galdur "galdur.lua"]'''
pattern = '''card.sticker = get_deck_win_sticker(_deck.effect.center)'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(_deck.effect.center) end
'''

## Card Sleeves X Galdur (best of both world lol)

# Alt stake stickers on decks on Galdur deck screen, part 2/2
[[patches]]
[patches.pattern]
target = '''=[SMODS CardSleeves "CardSleeves.lua"]'''
pattern = '''card.sticker = get_deck_win_sticker(selected_deck_center)'''
position = "after"
match_indent = true
payload = '''
if Showdown.config["Stakes"] then card.sticker_run_alt = Showdown.get_deck_win_sticker_alt(selected_deck_center) end
'''