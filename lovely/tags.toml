[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Switches in pool
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
pattern = '''elseif _type == 'Tag' then'''
position = 'at'
payload = '''
elseif _type == 'Tag' or _type == 'Switch' then
'''

# Money Switch, part 1/2
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
pattern = '''local blind_sprite = Sprite(0, 0, 0.7,0.7, G.ASSET_ATLAS['tags'], copy_table(config.pos))'''
position = 'at'
payload = '''
local blind_sprite = Sprite(0, 0, 0.7,0.7, G.ASSET_ATLAS[config.atlas or 'tags'], copy_table(config.pos))
'''

# Money Switch, part 2/2
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''add_round_eval_row({dollars = ret.dollars, bonus = true, name='tag'..i, pitch = pitch, condition = ret.condition, pos = ret.pos, tag = ret.tag})'''
position = 'at'
payload = '''
add_round_eval_row({dollars = ret.dollars, bonus = true, name='tag'..i, pitch = pitch, condition = ret.condition, pos = ret.pos, atlas = ret.atlas, tag = ret.tag})
'''

# Burning Switch
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''add_round_eval_row({dollars = G.GAME.blind.dollars, name='blind1', pitch = pitch})'''
position = 'before'
payload = '''
if G.GAME.burning_double_hands then G.GAME.blind.dollars = 0 end
'''

# Offering Switch
[[patches]]
[patches.pattern]
target = 'card.lua'
match_indent = true
pattern = '''if self.area and self.ability.couponed and (self.area == G.shop_jokers or self.area == G.shop_booster) then self.cost = 0 end'''
position = 'at'
payload = '''
if self.area and self.ability.couponed and (self.area == G.shop_jokers or self.area == G.shop_booster or self.area == G.shop_vouchers) then self.cost = 0 end
'''

# Encore Switch
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
match_indent = true
pattern = '''
if c1.ability.consumeable then
    G.consumeables:emplace(c1)
'''
position = 'before'
payload = '''
G.GAME.encore_card = {
    set = c1.ability.set,
    key = c1.config.center.key,
    enhancement = c1.ability.set == 'Enhanced' and c1.config.center or nil,
    seal = c1.seal,
    edition = c1.edition,
    stickers = {}
}
for _, v in pairs(SMODS.Stickers) do
    if c1.ability[v.key] then table.insert(G.GAME.encore_card.stickers, v.key) end
end
'''

# Put switches after tags in collection
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
match_indent = true
pattern = '''local tag_tab = SMODS.collection_pool(G.P_TAGS)'''
position = 'after'
payload = '''
local switches = {}
local tags = {}
for _, v in ipairs(tag_tab) do
    if v.type == 'Switch' then table.insert(switches, v)
    else table.insert(tags, v)
    end
end
tag_tab = {}
for _, v in ipairs(tags) do table.insert(tag_tab, v) end
for _, v in ipairs(switches) do table.insert(tag_tab, v) end
'''