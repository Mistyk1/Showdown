[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Addition of removing_cards context
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'if self.area then self.area:remove_card(self) end'
position = 'before'
match_indent = true
payload = '''
if G.jokers and G.jokers.cards then
    for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({ removing_cards = true, destroyed_card = self })
    end
end
'''

# This is for Baby Jimbo
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'if self.cards[i] == card then'
position = 'after'
match_indent = true
payload = '''
G.latest_area_baby_jimbo = self
'''

# Check unlock for free item (one doller)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = 'if c1.cost ~= 0 then'
position = 'before'
match_indent = true
payload = '''
check_for_unlock({type = 'buying_card', price = c1.cost})
'''

# Check unlock for sold card (egg drawing)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'ease_dollars(self.sell_cost)'
position = 'before'
match_indent = true
payload = '''
check_for_unlock({type = 'selling_card', sell_cost = self.sell_cost})
'''

# Hands check for Chaos Card unlock
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.selected_back_key = selected_back"
position = "after"
match_indent = true
payload = '''
self.GAME.chaos_card_hands = {flush = false, straight = false, five = false}
'''

# Check unlock for buying card (what a steel)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "playing_card_joker_effects({c1})"
position = "after"
match_indent = true
payload = '''
check_for_unlock({type = 'playing_card_added', card = c1})
'''

# Debuff last scored card (diplomatic immunity)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "for i=1, #pures do"
position = "before"
match_indent = true
payload = '''
if next(find_joker('diplomatic_immunity')) and scoring_hand[#scoring_hand].debuff then
    scoring_hand[#scoring_hand]:set_debuff(false)
end
'''

# Reloading speeching abilities of Jean-Paul into a game
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'elseif self.config.center.name == "Square Joker" then'
position = "before"
match_indent = true
payload = '''
elseif self.config.center.name == "jean_paul" then
    giveSpeech(self)
'''

# Substitute Teacher, part 1/2
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.GAME.consumeable_usage_total = G.GAME.consumeable_usage_total or {tarot = 0, planet = 0, spectral = 0, tarot_planet = 0, all = 0}"
position = "at"
match_indent = true
payload = '''
G.GAME.consumeable_usage_total = G.GAME.consumeable_usage_total or {tarot = 0, planet = 0, spectral = 0, tarot_planet = 0, mathematic = 0, all = 0}
'''

# Substitute Teacher, part 2/2
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "elseif card.config.center.set == 'Spectral' then  G.GAME.consumeable_usage_total.spectral = G.GAME.consumeable_usage_total.spectral + 1"
position = "after"
match_indent = true
payload = '''
elseif card.config.center.set == 'Mathematic' then G.GAME.consumeable_usage_total.mathematic = G.GAME.consumeable_usage_total.mathematic + 1
'''

# Substitute Teacher unlock, part 1/2
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "c_tarots_bought = 0,"
position = "after"
match_indent = true
payload = '''
c_maths_used = 0,
'''

# Substitute Teacher unlock, part 2/2
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "elseif not nc then draw_card(G.hand, G.play, 1, 'up', true, card, nil, mute) end"
position = "after"
match_indent = true
payload = '''
if card.config.center.set == 'Mathematic' then
    inc_career_stat('c_maths_used', 1)
end
'''

# Bugged Seed unlock (doesn't work)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "function win_game()"
position = "after"
match_indent = true
payload = '''
if G.GAME.seeded and G.GAME.selected_back.name == G.P_CENTERS.b_erratic.name and G.GAME.pseudorandom.seed == '7LB2WVPK' then
    check_for_unlock({type = '7LB2WVPK'})
end
'''

# Red Coins, part 1/4
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "if G.GAME.current_round.discards_left > 0 and G.GAME.modifiers.money_per_discard then"
position = "at"
payload = '''
if (G.GAME.current_round.discards_left > 0 and G.GAME.modifiers.money_per_discard) or #find_joker('red_coins') > 0 then
    local bonusDiscard = 0
    if #find_joker('red_coins') > 0 then
        for i=1, #find_joker('red_coins') do
            bonusDiscard = bonusDiscard + find_joker('red_coins')[i].ability.extra.money
        end
        bonusDiscard = bonusDiscard * G.GAME.current_round.discards_left
    end
'''

# Red Coins, part 2/4
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "add_round_eval_row({dollars = G.GAME.current_round.discards_left*(G.GAME.modifiers.money_per_discard), disp = G.GAME.current_round.discards_left, bonus = true, name='discards', pitch = pitch})"
position = "at"
payload = '''
local totalMoney = G.GAME.current_round.discards_left * (G.GAME.modifiers.money_per_discard or 0) + bonusDiscard
add_round_eval_row({dollars = totalMoney, disp = G.GAME.current_round.discards_left, bonus = true, name='discards', pitch = pitch})
'''

# Red Coins, part 3/4
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "dollars = dollars +  G.GAME.current_round.discards_left*(G.GAME.modifiers.money_per_discard)"
position = "at"
payload = '''
dollars = dollars + totalMoney
'''

# Red Coins, part 4/4
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
match_indent = true
pattern = "table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {\" \"..localize{type = 'variable', key = 'remaining_discard_money', vars = {G.GAME.modifiers.money_per_discard or 0}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})"
position = "at"
payload = '''
local bonusDiscard = 0
if #find_joker('red_coins') > 0 then
    for i=1, #find_joker('red_coins') do
        bonusDiscard = bonusDiscard + find_joker('red_coins')[i].ability.extra.money
    end
end
table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {" "..localize{type = 'variable', key = 'remaining_discard_money', vars = {(G.GAME.modifiers.money_per_discard or 0)+bonusDiscard}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
'''

# Money Cutter, part 1/5
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)"
position = "before"
payload = '''
check_for_unlock({type = 'interest', money = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})
'''

# Money Cutter, part 2/5
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "if G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money then"
position = "at"
payload = '''
if (G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money) or #find_joker('money_cutter') > 0 then
    local bonusHand = 0
    if #find_joker('money_cutter') > 0 then
        for i=1, #find_joker('money_cutter') do
            bonusHand = bonusHand + find_joker('money_cutter')[i].ability.extra.money
        end
        bonusHand = bonusHand * G.GAME.current_round.hands_left
    end
'''

# Money Cutter, part 3/5
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "add_round_eval_row({dollars = G.GAME.current_round.hands_left*(G.GAME.modifiers.money_per_hand or 1), disp = G.GAME.current_round.hands_left, bonus = true, name='hands', pitch = pitch})"
position = "at"
payload = '''
local totalMoney = G.GAME.current_round.hands_left*(G.GAME.modifiers.money_per_hand or 1) + bonusHand
add_round_eval_row({dollars = totalMoney, disp = G.GAME.current_round.hands_left, bonus = true, name='hands', pitch = pitch})
'''

# Money Cutter, part 4/5
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "dollars = dollars + G.GAME.current_round.hands_left*(G.GAME.modifiers.money_per_hand or 1)"
position = "at"
payload = '''
dollars = dollars + totalMoney
'''

# Money Cutter, part 5/5
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
match_indent = true
pattern = "table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {\" \"..localize{type = 'variable', key = 'remaining_hand_money', vars = {G.GAME.modifiers.money_per_hand or 1}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})"
position = "at"
payload = '''
local bonusHand = 0
if #find_joker('money_cutter') > 0 then
    for i=1, #find_joker('money_cutter') do
        bonusHand = bonusHand + find_joker('money_cutter')[i].ability.extra.money
    end
end
table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {" "..localize{type = 'variable', key = 'remaining_hand_money', vars = {(G.GAME.modifiers.money_per_hand or 1)+bonusHand}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
'''

# Versatile Joker (Yellow Deck)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
match_indent = true
pattern = "ease_dollars(G.GAME.current_round.dollars)"
position = "after"
payload = '''
for i = 1, #G.jokers.cards do
    G.jokers.cards[i]:calculate_joker({cash_out = true, money = G.GAME.current_round.dollars, interest = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})
end
'''

# Versatile Joker (Plasma Deck), part 1/2
[[patches]]
[patches.pattern]
target = "back.lua"
match_indent = true
pattern = "if self.name == 'Plasma Deck' and args.context == 'final_scoring_step' then"
position = "after"
payload = '''
if next(find_joker('versatile_joker')) then
    local tot = args.chips + args.mult
    args.chips = args.chips + math.floor(tot/4)
    args.mult = args.mult + math.floor(tot/4)
else
'''

# Versatile Joker (Plasma Deck), part 2/2
[[patches]]
[patches.pattern]
target = "back.lua"
match_indent = true
pattern = "update_hand_text({delay = 0}, {mult = args.mult, chips = args.chips})"
position = "before"
payload = '''
end
'''

# Versatile Joker (Starter Deck)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
match_indent = true
pattern = "inc_career_stat('c_wins', 1)"
position = "after"
payload = '''
if G.GAME.selected_back.name == 'Starter Deck' and next(find_joker('versatile_joker')) then
    G.PROFILES[G.SETTINGS.profile].starter_next_run = true
end
'''

# Versatile Joker (Magic Deck)
[[patches]]
[patches.regex]
target = "card.lua"
#match_indent = true
#line_prepend = '$indent'
pattern = "(?<indent1>[\t ]*)local card = create_card[(]'Tarot_Planet', G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot_planet, 'fool'[)][\n](?<indent2>[\t ]*)card:add_to_deck[(][)][\n](?<indent3>[\t ]*)G.consumeables:emplace[(]card[)]"
position = "after"
payload = '''

                for i = 1, #G.jokers.cards do
                    G.jokers.cards[i]:calculate_joker({using_fool = true, created_card = card})
                end
'''

# banana unlock
[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = "if pseudorandom(self.ability.name == 'Cavendish' and 'cavendish' or 'gros_michel') < G.GAME.probabilities.normal/self.ability.extra.odds then"
position = "after"
payload = '''
check_for_unlock({type = 'extinct', name = self.ability.name})
'''

# banana image scaling, part 1/2
[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = "if center.name == \"Wee Joker\" and (center.discovered or self.bypass_discovery_center) then"
position = "before"
payload = '''
if center.name == 'banana' and (center.discovered or self.bypass_discovery_center) then
    H = H/2
    W = W/2
    self.T.h = H
    self.T.w = W
end
'''

# banana image scaling, part 2/2
[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = "elseif self.config.center.name == \"Wee Joker\" then"
position = "before"
payload = '''
elseif self.config.center.name == 'banana' then
    H = H/2
    W = W/2
    self.T.h = H
    self.T.w = W
'''

# Versatile Joker (Nebula Joker), part 1/2
[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = "update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})"
position = "before"
payload = '''
local versatile, amount = find_joker('versatile_joker'), 1
if #versatile > 0 and G.GAME.selected_back.name == 'Nebula Deck' then
    for i=1, #versatile do amount = amount + versatile[i].ability.extra.planet end
end
amount = math.floor(amount)
'''

# Versatile Joker (Nebula Joker), part 2/2
[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = "level_up_hand(used_tarot, self.ability.consumeable.hand_type)"
position = "at"
payload = '''
level_up_hand(used_tarot, self.ability.consumeable.hand_type, nil, amount)
'''